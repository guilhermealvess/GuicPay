// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/guilhermealvess/guicpay/domain/entity"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/guilhermealvess/guicpay/domain/usecase"

	uuid "github.com/google/uuid"
)

// AccountUseCase is an autogenerated mock type for the AccountUseCase type
type AccountUseCase struct {
	mock.Mock
}

// ExecuteDeposit provides a mock function with given fields: ctx, accountID, value
func (_m *AccountUseCase) ExecuteDeposit(ctx context.Context, accountID uuid.UUID, value uint64) (uuid.UUID, error) {
	ret := _m.Called(ctx, accountID, value)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteDeposit")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64) (uuid.UUID, error)); ok {
		return rf(ctx, accountID, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64) uuid.UUID); ok {
		r0 = rf(ctx, accountID, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uint64) error); ok {
		r1 = rf(ctx, accountID, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteLogin provides a mock function with given fields: ctx, email, password
func (_m *AccountUseCase) ExecuteLogin(ctx context.Context, email string, password string) (*entity.ResumeAccount, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteLogin")
	}

	var r0 *entity.ResumeAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.ResumeAccount, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.ResumeAccount); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ResumeAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteNewAccount provides a mock function with given fields: ctx, input
func (_m *AccountUseCase) ExecuteNewAccount(ctx context.Context, input usecase.NewAccountInput) (uuid.UUID, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteNewAccount")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.NewAccountInput) (uuid.UUID, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.NewAccountInput) uuid.UUID); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.NewAccountInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteSnapshotTransaction provides a mock function with given fields: ctx, accountID
func (_m *AccountUseCase) ExecuteSnapshotTransaction(ctx context.Context, accountID uuid.UUID) {
	_m.Called(ctx, accountID)
}

// ExecuteTransfer provides a mock function with given fields: ctx, payer, payee, value
func (_m *AccountUseCase) ExecuteTransfer(ctx context.Context, payer uuid.UUID, payee uuid.UUID, value uint64) (uuid.UUID, error) {
	ret := _m.Called(ctx, payer, payee, value)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTransfer")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uint64) (uuid.UUID, error)); ok {
		return rf(ctx, payer, payee, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uint64) uuid.UUID); ok {
		r0 = rf(ctx, payer, payee, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, uint64) error); ok {
		r1 = rf(ctx, payer, payee, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *AccountUseCase) FindAll(ctx context.Context) ([]*usecase.AccountOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*usecase.AccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*usecase.AccountOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*usecase.AccountOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*usecase.AccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, accountID
func (_m *AccountUseCase) FindByID(ctx context.Context, accountID uuid.UUID) (*usecase.AccountOutput, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *usecase.AccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*usecase.AccountOutput, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *usecase.AccountOutput); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.AccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountUseCase creates a new instance of AccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountUseCase {
	mock := &AccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
