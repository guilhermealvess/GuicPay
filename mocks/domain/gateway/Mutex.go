// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Mutex is an autogenerated mock type for the Mutex type
type Mutex struct {
	mock.Mock
}

// Lock provides a mock function with given fields: ctx, key, ttl
func (_m *Mutex) Lock(ctx context.Context, key string, ttl time.Duration) error {
	ret := _m.Called(ctx, key, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlock provides a mock function with given fields: ctx, key
func (_m *Mutex) Unlock(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Unlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMutex creates a new instance of Mutex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutex(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mutex {
	mock := &Mutex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
