// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/guilhermealvess/guicpay/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// AccountsServer is an autogenerated mock type for the AccountsServer type
type AccountsServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AccountsServer) Create(_a0 context.Context, _a1 *pb.CreateAccountRequest) (*pb.CreateAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *pb.CreateAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAccountRequest) (*pb.CreateAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAccountRequest) *pb.CreateAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: _a0, _a1
func (_m *AccountsServer) Fetch(_a0 context.Context, _a1 *pb.FetchAccountRequest) (*pb.FetchAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 *pb.FetchAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.FetchAccountRequest) (*pb.FetchAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.FetchAccountRequest) *pb.FetchAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.FetchAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.FetchAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *AccountsServer) List(_a0 context.Context, _a1 *pb.ListRequest) (*pb.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *pb.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListRequest) (*pb.ListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListRequest) *pb.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAccountsServer provides a mock function with given fields:
func (_m *AccountsServer) mustEmbedUnimplementedAccountsServer() {
	_m.Called()
}

// NewAccountsServer creates a new instance of AccountsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountsServer {
	mock := &AccountsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
